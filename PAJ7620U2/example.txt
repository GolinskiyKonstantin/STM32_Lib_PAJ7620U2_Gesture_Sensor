/*	сохраняем данный файл в кодировке UTF-8		*/

	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com

////////////////////////////////////////////////////////////////////////////////////////

#include "PAJ7620U2.h"

// переменная для хранения номера движения
uint16_t Gesture_Data = 0;

// переменные для хранения размера обьекта и его освященность перед датчиком
uint8_t OBJ_BRIGHTNESS = 0;		// Object Brightness (Max. 255)
uint16_t OBJ_SIZE = 0;				// Object Size (Max. 900)

// если хотим обрабатывать данные замера движения по прерыванию ( размер обьекта и освященность обьекта по прерыванию не работает )
// то проверку было ли движение делать не нужно а сам номер движения обрабатываем в прерывании
// на датчике пин прерывания тянет ножку к земле через открытый сток при прерывании когда было именно движение
// на данном модуле пин прерывания уже подтянут к питанию

////////////////////////////////////////////////////////////////////////////////////////

///////////////////  SWO  //////////////////////////////////////////////////////////////////////
#include <stdio.h>
#define ITM_Port8(n)    (*((volatile unsigned char *)(0xE0000000+4*n)))
#define ITM_Port16(n)   (*((volatile unsigned short*)(0xE0000000+4*n)))
#define ITM_Port32(n)   (*((volatile unsigned long *)(0xE0000000+4*n)))
	
#define DEMCR           (*((volatile unsigned long *)(0xE000EDFC)))
#define TRCENA          0x01000000

struct _FILE { int handle; /* Add whatever you need here */ };
FILE __stdout;
FILE __stdin;

int fputc(int ch, FILE *f) {
   if (DEMCR & TRCENA) {
	while (ITM_Port32(0) == 0){};
    	ITM_Port8(0) = ch;
  }
  return(ch);
}
////////////  SWO END  /////////////////////////////////////////////////////////////////////////

	.........
	.........

main()=============================================================================================================================

	.........
	.........
	.........
////////////////////////////////////////////////////////////////////////////////////////////////
	
	// при инициализации возвращает ( если соединение с датчиком удачное ) значение 0x7620 либо 0 если датчик не увидел
	uint16_t ID = PAJ7620U2_init();
	printf("PartID = 0x%04X \n", ID );	// #define PAJ_PARTID  								0x7620

///////////////////////////////////////////////////////////////////////////////////////////////

while(1)===========================================================================================================================
	///////////////////////////////////////////////////////////////////////////////////////
		
		// запрашиваем номер движения ( если движения небыло вернет 0 ) если было то его номер
		// если нужно прерывание то ето делать не нужно как будет движение дернится прерывание и 
		// номер движения можно получить в обработчике прерывания
		// на модуле пин прерывание тянеться к земле через открытий сток ( на данном модуле пин подтянут к питанию )
		// ( размер обьекта и освященность обьекта по прерыванию не работает )
		Gesture_Data = PAJ7620U2_Gesture_ReadData();	

		// если движение было то
		if( Gesture_Data != PAJ_NONE )
		{
			switch (Gesture_Data)
			{
				case PAJ_UP:			  			  						printf("Up -> Data = 0x%04X\n", Gesture_Data );							break;	// вверх
				case PAJ_DOWN:													printf("Down -> Data = 0x%04X\n", Gesture_Data );						break;	// вниз
				case PAJ_LEFT:													printf("Left -> Data = 0x%04X\n", Gesture_Data );						break;	// влево
				case PAJ_RIGHT:													printf("Right -> Data = 0x%04X\n", Gesture_Data );					break;	// вправо
				case PAJ_FORWARD:												printf("Forward -> Data = 0x%04X\n", Gesture_Data );				break;	// вперед	
				case PAJ_BACKWARD:											printf("Backward -> Data = 0x%04X\n", Gesture_Data ); 			break;	// назад
				case PAJ_CLOCKWISE:											printf("Clockwise -> Data = 0x%04X\n", Gesture_Data );			break;	// по часовой стрелке
				case PAJ_ANTI_CLOCKWISE:								printf("AntiClockwise -> Data = 0x%04X\n", Gesture_Data ); 	break;	// против часовой стрелки
				case PAJ_WAVE:													printf("Wave -> Data = 0x%04X\n", Gesture_Data); 						break;	// волна
				
				default: break;
			}
		}
		Gesture_Data = 0;
		
		// запрашиваем размер и освященность обьекта перед датчиком
		OBJ_BRIGHTNESS = PAJ7620U2_PS_ReadObjBrightness();	// Object Brightness (Max. 255)
		OBJ_SIZE = PAJ7620U2_PS_ReadObjSize();							// Object Size (Max. 900)
		
		DEV_Delay_ms(50);

	///////////////////////////////////////////////////////////////////////////////////////
	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================

//////////////////////////////////////////////////////////////////////////////////////////////

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == GPIO_PIN_1 )
	{
		printf("EXTI\n");
	}
	
}
//////////////////////////////////////////////////////////////////////////////////////////////

